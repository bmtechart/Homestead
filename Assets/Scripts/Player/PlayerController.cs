using System.Collections;
using System.Collections.Generic;
using System.Transactions;
using UnityEngine;
using UnityEngine.Events;
using UnityEngine.InputSystem;

/// <summary>
/// The player controller class receives player input
/// and generates events events based on that input.
/// Events generated by this class should be human readable
/// and relevant to gameplay. 
/// For example, a player input component tells us the mouse has been clicked.
/// This class tells us that a mouse click means the player should attack, and
/// creates relevant callbacks based on player input.
/// </summary>

[RequireComponent(typeof(PlayerInput))]
public class PlayerController : MonoBehaviour
{
    #region Components
    private PlayerInput playerInput;
    #endregion

    #region Events
    [Header("Event Dispatchers")]
    [Header("Movement")]
    public UnityEvent<Vector2> m_OnPlayerMoveStart;
    public UnityEvent<Vector2> m_OnPlayerMoveCancel;


    [Header("Attacking")]
    public UnityEvent m_OnPlayerAttackStart;
    public UnityEvent m_OnPlayerAttackCancel;
    #endregion
    // Start is called before the first frame update
    void Start()
    {
        playerInput = GetComponent<PlayerInput>();
    }

    // Update is called once per frame
    void Update()
    {
        
    }


    public void OnMove(InputAction.CallbackContext ctx)
    {
        //get movement vector from input
        Vector2 movementVector = ctx.ReadValue<Vector2>();

        //invoke event broadcasting updated input value
        if (ctx.phase == InputActionPhase.Performed) { m_OnPlayerMoveStart?.Invoke(movementVector); }
        if (ctx.phase == InputActionPhase.Canceled) { m_OnPlayerMoveCancel?.Invoke(movementVector); }
    }

    public void OnDash(InputAction.CallbackContext ctx)
    {

    }

    public void OnUseEquipment(InputAction.CallbackContext ctx) 
    {
        if(ctx.phase == InputActionPhase.Started) { m_OnPlayerAttackStart?.Invoke(); }
        if(ctx.phase == InputActionPhase.Canceled) { m_OnPlayerAttackCancel?.Invoke(); }
    }
}
